@using Ale_Ink.HttpServices
@using Ale_Ink.Shared.Models
@using Ale_Ink.Shared.DTOs
@inject INoteHttpService NoteService
@inject NoteAssignmentService NoteAssignmentService


@if (IsVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Assign Note</h5>
                    <button type="button" class="btn-close" @onclick="Hide"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Note:</strong> @Note?.Content</p>

                    <input class="form-control mb-2" @bind="EntityName" placeholder="Enter name..." />

                    <select class="form-select mb-2" @bind="SelectedType">
                        <option value="">Select type</option>
                        <option value="Person">Person</option>
                        <option value="Item">Item</option>
                        <option value="Place">Place</option>
                    </select>

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="text-danger">@ErrorMessage</div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteNote">Delete Note</button>
                    <button class="btn btn-secondary" @onclick="Hide">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveAssignment">Assign</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public Note? Note { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<(string Type, string Name)> OnAssign { get; set; }
    [Parameter] public EventCallback OnAssignmentSaved { get; set; }


    private string EntityName = "";
    private string SelectedType = "";
    private string? ErrorMessage;
    private List<Note> Notes = new();

    

    private async Task SaveAssignment()
    {
        if (Note == null || string.IsNullOrWhiteSpace(EntityName) || string.IsNullOrWhiteSpace(SelectedType))
        {
            ErrorMessage = "All fields are required.";
            return;
        }

        await NoteAssignmentService.AssignEntityToNoteAsync(SelectedType, EntityName, Note!.NoteId);

        await OnAssignmentSaved.InvokeAsync();

        Hide();
    }

    private async Task DeleteNote()
    {
        if (Note == null)
        {
            ErrorMessage = "No note selected.";
            return;
        }
        await NoteService.DeleteNoteAsync(Note.NoteId);

        Notes.Remove(Note);

        Note = null;

        await OnAssignmentSaved.InvokeAsync();

        Hide();
    }

    public void Show()
    {
        IsVisible = true;
        StateHasChanged();
    }

     public void Hide()
     {
         EntityName = "";
         SelectedType = "";
         ErrorMessage = null;
         IsVisible = false;
         StateHasChanged();
     }
}

