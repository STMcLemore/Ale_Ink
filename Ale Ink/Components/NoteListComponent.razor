@using Ale_Ink.HttpServices
@using Ale_Ink.Shared.Models
@using Ale_Ink.Shared.DTOs
@inject HttpServices.INoteHttpService NoteService
@inject HttpServices.NoteAssignmentService NoteAssignmentService



@typeparam TEntity

<div class="page-wrapper">
    <div class="header">
        <h3>@Title Notes</h3>
    </div>

    <div class="main-content">
        <div class="notes-section">
            <div class="notes-list">
                @foreach (var note in FilteredNotes)
                {
                    <div class="note-box-wrapper">
                        <button class="note-action-button" @onclick="() => OnNoteAction(note)">+</button>
                        <div class="note-box">
                            <div class="note-header">
                                <div class="note-timestamp">@note.CreatedAt.ToString("g")</div>
                                <div class="note-category-row">
                                    @if (note.Items?.Any() == true)
                                    {
                                        <span class="note-category item">Item</span>
                                    }
                                    @if (note.People?.Any() == true)
                                    {
                                        <span class="note-category person">Person</span>
                                    }
                                    @if (note.Places?.Any() == true)
                                    {
                                        <span class="note-category place">Place</span>
                                    }
                                </div>
                            </div>
                            <div class="note-content">@note.Content</div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="item-sidebar">
            <h5>@Title List</h5>
            <ul class="list-unstyled">
                @foreach (var entity in Entities)
                {
                    <li>
                        <button class="btn btn-link text-start w-100" @onclick="() => FilterByEntity(entity)">
                            @GetEntityName(entity)
                        </button>
                    </li>
                }
            </ul>
            <button class="btn btn-sm btn-secondary mt-2" @onclick="ClearFilter">Clear Filter</button>
        </div>
    </div>

    @if (Visible)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Assign Note</h5>
                        <button type="button" class="btn-close" @onclick="Cancel"></button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Note:</strong> @NoteToAssign?.Content</p>

                        <input class="form-control mb-2" @bind="EntityName" placeholder="Enter name..." />

                        @if (ErrorMessage != null)
                        {
                            <div class="text-danger">@ErrorMessage</div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                        <button class="btn btn-primary" @onclick="SaveAssignment">Assign</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = "Notes";
    [Parameter] public List<Note> Notes { get; set; } = new();
    [Parameter] public List<TEntity> Entities { get; set; } = new();
    [Parameter] public Func<TEntity, string> GetEntityName { get; set; } = default!;
    [Parameter] public Func<Note, bool> EntityFilter { get; set; } = default!;
    [Parameter] public Func<string, string, int, Task> OnAssignEntity { get; set; } = default!;

    private Note? NoteToAssign;
    private string? SelectedFilter = null;
    private string EntityName = "";
    private string SelectedType = "";
    private bool Visible = false;
    private string? ErrorMessage;

    private List<Note> FilteredNotes =>
        string.IsNullOrEmpty(SelectedFilter)
            ? Notes
            : Notes.Where(EntityFilter).ToList();

    private void OnNoteAction(Note note)
    {
        NoteToAssign = note;
        Visible = true;
    }

    // private async Task AssignNote()
    // {
    //     if (NoteToAssign == null || string.IsNullOrWhiteSpace(EntityName))
    //     {
    //         ErrorMessage = "All fields required.";
    //         return;
    //     }

    //     ErrorMessage = null;

    //     await OnAssignEntity.Invoke(EntityName, NoteToAssign);
    //     CloseModal();
    // }

    // private async Task SaveAssignment()
    // {
    //     if (NoteToAssign == null || string.IsNullOrWhiteSpace(EntityName) || string.IsNullOrWhiteSpace(SelectedType))
    //     {
    //         ErrorMessage = "All fields are required.";
    //         return;
    //     }

    //     ErrorMessage = null;

    //     try
    //     {
    //         await NoteAssignmentService.AssignEntityToNoteAsync(SelectedType, EntityName, NoteToAssign.NoteId);
    //         Notes = (await NoteService.GetAllNotesAsync())
    //                     .Where(n => n.Items != null && n.Items.Any())
    //                     .ToList();
    //     }
    //     catch (Exception ex)
    //     {
    //         ErrorMessage = $"Failed to assign: {ex.Message}";
    //     }
    // }

    private async Task SaveAssignment()
    {
        await NoteAssignmentService.AssignEntityToNoteAsync(SelectedType, EntityName, NoteToAssign.NoteId);

        CloseModal();

        Notes = await NoteService.GetAllNotesAsync();
    }

    private void CloseModal()
    {
        EntityName = "";
        Visible = false;
        NoteToAssign = null;
    }

    private void Cancel() => CloseModal();

    private void FilterByEntity(TEntity entity)
    {
        SelectedFilter = GetEntityName(entity);
    }

    private void ClearFilter()
    {
        SelectedFilter = null;
    }
}
