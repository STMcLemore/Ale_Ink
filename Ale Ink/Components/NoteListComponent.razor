@using Ale_Ink.HttpServices
@using Ale_Ink.Shared.Models
@using Ale_Ink.Shared.DTOs
@inject HttpServices.INoteHttpService NoteService
@inject HttpServices.NoteAssignmentService NoteAssignmentService



@typeparam TEntity

<div class="page-wrapper">
    <div class="header">
        <h3>@Title Notes</h3>
    </div>

    <NoteAssignmentModal @ref="noteAssignmentModalRef"
                         Note="NoteToAssign"
                         OnAssignmentSaved="ReloadNotes"
                         OnClose="CloseModal" />

    <div class="main-content">
        <div class="notes-section">
            <div class="notes-list">
                @foreach (var note in FilteredNotes)
                {
                    <div class="note-box-wrapper">
                        <button class="note-action-button" @onclick="() => OnNoteAction(note)">+</button>
                        <div class="note-box">
                            <div class="note-header">
                                <div class="note-timestamp">@note.CreatedAt.ToString("g")</div>
                                <div class="note-category-row">
                                    @if (note.Items?.Any() == true)
                                    {
                                        <span class="note-category item">Item</span>
                                    }
                                    @if (note.People?.Any() == true)
                                    {
                                        <span class="note-category person">Person</span>
                                    }
                                    @if (note.Places?.Any() == true)
                                    {
                                        <span class="note-category place">Place</span>
                                    }
                                </div>
                            </div>
                            <div class="note-content">@note.Content</div>
                        </div>
                    </div>
                }
            </div>
        </div>

        @if (ShowSidebar)
        {
            <div class="item-sidebar">
                <h5>@Title List</h5>
                <ul class="list-unstyled">
                    @foreach (var entity in Entities)
                    {
                        <li>
                            <button class="btn btn-link text-start w-100" @onclick="() => FilterByEntity(entity)">
                                @GetEntityName(entity)
                            </button>
                        </li>
                    }
                </ul>
                <button class="btn btn-sm btn-secondary mt-2" @onclick="ClearFilter">Clear Filter</button>
            </div>
         }
    </div>
</div> 

@code {
    [Parameter] public string Title { get; set; } = "Notes";
    [Parameter] public List<Note> Notes { get; set; } = new();
    [Parameter] public List<TEntity> Entities { get; set; } = new();
    [Parameter] public Func<TEntity, string> GetEntityName { get; set; } = default!;
    [Parameter] public Func<Note, bool> EntityFilter { get; set; } = default!;
    [Parameter] public Func<string, string, int, Task> OnAssignEntity { get; set; } = default!;
    [Parameter] public string? SelectedFilter { get; set; }
    [Parameter] public EventCallback<string?> SelectedFilterChanged { get; set; }
    [Parameter] public bool ShowSidebar { get; set; } = true;
    [Parameter] public EventCallback OnEntitiesRefreshed { get; set; }
    [Parameter] public EventCallback OnAssignmentSaved { get; set; }


    private string EntityName = "";
    private string SelectedType = "";
    private bool Visible = false;
    private string? ErrorMessage;
    private NoteAssignmentModal noteAssignmentModalRef;
    private Note? NoteToAssign;

    private List<Note> FilteredNotes =>
        string.IsNullOrEmpty(SelectedFilter)
            ? Notes
            : Notes.Where(EntityFilter).ToList();

    private void OnNoteAction(Note note)
    {
        NoteToAssign = note;
        noteAssignmentModalRef.Show();
    }

    private void CloseModal()
    {
        EntityName = "";
        SelectedType = "";
        ErrorMessage = null;
        Visible = false;
        noteAssignmentModalRef?.Hide();
    }

    private async void FilterByEntity(TEntity entity)
    {
        await SelectedFilterChanged.InvokeAsync(GetEntityName(entity));
    }


    private async void ClearFilter()
    {
        await SelectedFilterChanged.InvokeAsync(null);
    }

    private async Task ReloadNotes()
    {
        await OnAssignmentSaved.InvokeAsync();

        await OnEntitiesRefreshed.InvokeAsync();

        if (!string.IsNullOrEmpty(SelectedFilter))
        {
            Notes = Notes.Where(EntityFilter).ToList();
        }

        StateHasChanged();
    }
}
