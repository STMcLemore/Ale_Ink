@page "/"
@using Ale_Ink.Shared.Models
@using Ale_Ink.Shared.DTOs
@inject HttpServices.NoteHttpService NoteService
@inject HttpServices.ItemHttpService ItemService
@inject HttpServices.PersonHttpService PersonService
@inject HttpServices.PlaceHttpService PlaceService
@inherits LayoutComponentBase


<div class="page-container">
    <div class="header">
        <h3>Campaign Notes</h3>
    </div>

    <div class="notes-list">
        @foreach (var note in Notes)
        {
            <div class="note-box-wrapper">
                <button class="note-action-button" @onclick="() => OnNoteAction(note)">
                    +
                </button>
                <div class="note-box">
                    <div class="note-timestamp">@note.CreatedAt.ToString("g")</div>
                    <div class="note-content">@note.Content</div>
                </div>
            </div>
        }


    </div>

    <div class="note-input">
        <textarea @bind="NewNoteContent" rows="3" placeholder="Enter your note here..."></textarea>
        <br />
        <button class="btn btn-primary mt-2" @onclick="SubmitNote">Add Note</button>
    </div>
</div>

@if (Visible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Assign Note</h5>
                    <button type="button" class="btn-close" @onclick="Cancel"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Note:</strong> @NoteToAssign?.Content</p>

                    <input class="form-control mb-2" @bind="EntityName" placeholder="Enter name..." />

                    <select class="form-select mb-2" @bind="SelectedType">
                        <option value="">Select type</option>
                        <option value="Person">Person</option>
                        <option value="Item">Item</option>
                        <option value="Place">Place</option>
                    </select>

                    @if (ErrorMessage != null)
                    {
                        <div class="text-danger">@ErrorMessage</div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveAssignment">Assign</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Note> Notes = new();
    private List<Item> Items = new();
    private List<Person> People = new();
    private List<Place> Places = new();
    private string NewNoteContent = "";
    private bool Visible = false;
    private Note? NoteToAssign;


    private string EntityName = "";
    private string SelectedType = "";
    private string? ErrorMessage;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Notes = await NoteService.GetAllNotesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching notes: {ex.Message}");
        }
    }


    private async Task SubmitNote()
    {
        if (!string.IsNullOrWhiteSpace(NewNoteContent))
        {
            var newNote = new Note { Content = NewNoteContent, CreatedAt = DateTime.UtcNow };
            await NoteService.AddNoteAsync(newNote);
            NewNoteContent = "";
            Notes = await NoteService.GetAllNotesAsync(); // Refresh notes list
        }
    }

    private void OnNoteAction(Note note)
    {
        NoteToAssign = note;
        Visible = true;
    }

    private async Task SaveAssignment()
    {
        if (NoteToAssign == null || string.IsNullOrWhiteSpace(EntityName) || string.IsNullOrWhiteSpace(SelectedType))
        {
            ErrorMessage = "All fields are required.";
            return;
        }

        ErrorMessage = null;

        try
        {
            switch (SelectedType)
            {
                case "Person":
                    await PersonService.AddPersonAsync(new() { Name = EntityName, Notes = new List<Note> { NoteToAssign } });
                    break;
                case "Item":
                    await ItemService.AddItemFromNoteAsync(new ItemFromNoteDTO { Name = EntityName, NoteId = NoteToAssign!.NoteId });
                    break;
                case "Place":
                    await PlaceService.AddPlaceAsync(new() { Name = EntityName, Notes = new List<Note> { NoteToAssign } });
                    break;

                    return;
            }

             CloseModal();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to assign: {ex.Message}";
        }
    }

    private void Cancel() => CloseModal();

    private void CloseModal()
    {
        EntityName = "";
        SelectedType = "";
        ErrorMessage = null;
        Visible = false;
    }

}

