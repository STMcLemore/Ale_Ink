@page "/"
@using Ale_Ink.Shared.Models
@inject HttpServices.NoteHttpService NoteService
@inherits LayoutComponentBase



 <style>
    .page-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        box-sizing: border-box;
    }

    .header {
        text-align: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid #ccc;
    }

    .notes-list {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .note-item {
        margin: 0.25rem 0;
        width: 100%;
        max-width: 600px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 0.75rem;
        background-color: #f9f9f9;
        position: relative;
    }

    .note-input {
        position: sticky;
        bottom: 0;
        background: #fff;
        padding: 1rem;
        width: 100%;
        max-width: 1000px;
        margin: 0 auto;
        box-shadow: 0 -2px 6px rgba(0, 0, 0, 0.1);
        box-sizing: border-box;
    }

    textarea {
        width: 100%;
        resize: none;
        box-sizing: border-box;
    }

    button {
        margin-top: 0.5rem;
    }

    .note-box {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 0.75rem;
        width: 100%;
        max-width: 900px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: box-shadow 0.2s ease;
    }

        .note-box:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .note-timestamp {
        font-size: 0.85rem;
        color: #888;
        margin-bottom: 0.5rem;
    }

    .note-content {
        font-size: 1rem;
        white-space: pre-wrap;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    .note-box-wrapper {
        position: relative;
        display: inline-block;
        margin-bottom: 0.75rem;
        width: 100%;
        max-width: 900px;
        box-sizing: border-box;
    }

    .note-action-button {
        position: absolute;
        top: -5px;
        left: -28px;
        width: 28px;
        height: 27px;
        background-color: #e0e0e0;
        border: 1px solid #bbb;
        border-radius: 4px;
        font-weight: bold;
        color: #333;
        cursor: pointer;
        box-shadow: 1px 1px 4px rgba(0,0,0,0.1);
        transition: background-color 0.2s ease;
    }

        .note-action-button:hover {
            background-color: #d4d4d4;
        }

</style>


<div class="page-container">
    <div class="header">
        <h3>Campaign Notes</h3>
    </div>

    <div class="notes-list">
        @foreach (var note in Notes)
        {
            <div class="note-box-wrapper">
                <button class="note-action-button" @onclick="() => OnNoteAction(note)">
                    +
                </button>
                <div class="note-box">
                    <div class="note-timestamp">@note.CreatedAt.ToString("g")</div>
                    <div class="note-content">@note.Content</div>
                </div>
            </div>
        }


    </div>

    <div class="note-input">
        <textarea @bind="NewNoteContent" rows="3" placeholder="Enter your note here..."></textarea>
        <br />
        <button @onclick="SubmitNote">Add Note</button>
    </div>
</div>

@code {
    private List<Note> Notes = new();
    private List<Item> Items = new();
    private List<Person> People = new();
    private List<Place> Places = new();
    private string NewNoteContent = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Notes = await NoteService.GetAllNotesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching notes: {ex.Message}");
        }
    }


    private async Task SubmitNote()
    {
        if (!string.IsNullOrWhiteSpace(NewNoteContent))
        {
            var newNote = new Note { Content = NewNoteContent, CreatedAt = DateTime.UtcNow };
            await NoteService.AddNoteAsync(newNote);
            NewNoteContent = "";
            Notes = await NoteService.GetAllNotesAsync(); // Refresh notes list
        }
    }

    private void OnNoteAction(Note note)
    {
        // Placeholder logic
        Console.WriteLine($"Button clicked for note: {note.NoteId}");
    }

}

