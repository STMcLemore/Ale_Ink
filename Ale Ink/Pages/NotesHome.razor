@page "/"

@using Ale_Ink.Components
@using Ale_Ink.HttpServices
@using Ale_Ink.Shared.Models
@using Ale_Ink.Shared.DTOs
@inject HttpServices.INoteHttpService NoteHttpService
@inject HttpServices.IItemHttpService ItemService
@inject HttpServices.IPersonHttpService PersonService
@inject HttpServices.IPlaceHttpService PlaceService


<NoteListComponent TEntity="Note"
Title="All"
Notes="@Notes"
Entities="@Notes"
GetEntityName="@(note => note.Content)"
OnAssignEntity="(type, name, noteId) => SaveAssignment(type, name, noteId)"
                   OnAssignmentSaved="ReloadNotesFromGrandparent"
SelectedFilter="@SelectedFilter"
SelectedFilterChanged="@(value => SelectedFilter = value)" 
ShowSidebar="false" />

<div class="note-input">
    <textarea @bind="NewNoteContent" rows="3" placeholder="Enter your note here..."></textarea>
    <br />
    <button class="btn btn-primary mt-2" @onclick="SubmitNote">Add Note</button>
</div>


@code {
    private List<Note> Notes = new();
    private List<Item> Items = new();

    private string EntityName = "";
    private string SelectedType = "";
    private string? ErrorMessage;
    private Note? NoteToAssign;
    private string SelectedFilter = "";
    private bool Visible = false;
    private string NewNoteContent = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Notes = await NoteHttpService.GetAllNotesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching notes: {ex.Message}");
        }
    }


    private async Task SaveAssignment(string type, string name, int noteId)
    {
        await NoteHttpService.AssignNoteToEntityAsync(noteId, type, name);

        await CloseModal();

        Notes = await NoteHttpService.GetAllNotesAsync();
    }

    private async Task ReloadNotesFromGrandparent()
    {
        Notes = await NoteHttpService.GetAllNotesAsync();

        StateHasChanged();
    }

    private async Task CloseModal()
    {
        EntityName = "";
        SelectedType = "";
        ErrorMessage = null;
        Visible = false;

    }

    private async Task SubmitNote()
    {
        if (!string.IsNullOrWhiteSpace(NewNoteContent))
        {
            var newNote = new Note { Content = NewNoteContent, CreatedAt = DateTime.UtcNow };

            await NoteHttpService.AddNoteAsync(newNote);

            NewNoteContent = "";

            Notes = await NoteHttpService.GetAllNotesAsync();
        }
    }
}

