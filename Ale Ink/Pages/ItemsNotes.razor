@page "/itemsNotes"

@using Ale_Ink.Components
@using Ale_Ink.HttpServices
@using Ale_Ink.Shared.Models
@using Ale_Ink.Shared.DTOs
@inject HttpServices.INoteHttpService NoteService
@inject HttpServices.IItemHttpService ItemService
@inject HttpServices.NoteAssignmentService NoteAssignmentService

<NoteListComponent TEntity="Item"
                   Title="Item"
                   Notes="@Notes"
                   Entities="@Items"
                   GetEntityName="@(item => item.Name)"
                   EntityFilter="@(note => note.Items?.Any(i => i.Name == SelectedFilter) == true)"
                   OnAssignEntity="(type, name, noteId) => SaveAssignment(type, name, noteId)"
                   SelectedFilter="@SelectedFilter"
                   SelectedFilterChanged="@(value => SelectedFilter = value)" />

@code {
    private List<Note> Notes = new();
    private List<Item> Items = new();

    private string EntityName = "";
    private string SelectedType = "";
    private string? ErrorMessage;
    private Note? NoteToAssign;
    private string SelectedFilter = "";
    private bool Visible = false;

    protected override async Task OnInitializedAsync()
    {
        var allNotes = await NoteService.GetAllNotesAsync();
        Notes = allNotes.Where(n => n.Items != null && n.Items.Any()).ToList(); // Only item-related notes
        Items = await ItemService.GetAllItemsAsync();
    }


     private async Task SaveAssignment(string type, string name, int noteId)
     {
         await NoteAssignmentService.AssignEntityToNoteAsync(type, name, noteId);

         await CloseModal();

         Notes = await NoteService.GetAllNotesAsync();
     }

    private async Task CloseModal()
    {
        EntityName = "";
        SelectedType = "";
        ErrorMessage = null;
        Visible = false;

    }
} 
