// <auto-generated />
using System;
using Ale_Ink.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ale_Ink.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250621004814_FixItemNoteRelationship")]
    partial class FixItemNoteRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Ale_Ink.Shared.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Ale_Ink.Shared.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("NoteId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Ale_Ink.Shared.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Ale_Ink.Shared.Models.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("PlaceId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ItemNote", b =>
                {
                    b.Property<int>("ItemsItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotesNoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsItemId", "NotesNoteId");

                    b.HasIndex("NotesNoteId");

                    b.ToTable("ItemNote");
                });

            modelBuilder.Entity("ItemPerson", b =>
                {
                    b.Property<int>("ItemsItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeoplePersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsItemId", "PeoplePersonId");

                    b.HasIndex("PeoplePersonId");

                    b.ToTable("ItemPerson");
                });

            modelBuilder.Entity("ItemPlace", b =>
                {
                    b.Property<int>("ItemsItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlacesPlaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsItemId", "PlacesPlaceId");

                    b.HasIndex("PlacesPlaceId");

                    b.ToTable("ItemPlace");
                });

            modelBuilder.Entity("NotePerson", b =>
                {
                    b.Property<int>("NotesNoteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeoplePersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NotesNoteId", "PeoplePersonId");

                    b.HasIndex("PeoplePersonId");

                    b.ToTable("NotePerson");
                });

            modelBuilder.Entity("NotePlace", b =>
                {
                    b.Property<int>("NotesNoteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlacesPlaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NotesNoteId", "PlacesPlaceId");

                    b.HasIndex("PlacesPlaceId");

                    b.ToTable("NotePlace");
                });

            modelBuilder.Entity("PersonPlace", b =>
                {
                    b.Property<int>("PeoplePersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlacesPlaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PeoplePersonId", "PlacesPlaceId");

                    b.HasIndex("PlacesPlaceId");

                    b.ToTable("PersonPlace");
                });

            modelBuilder.Entity("ItemNote", b =>
                {
                    b.HasOne("Ale_Ink.Shared.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ale_Ink.Shared.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemPerson", b =>
                {
                    b.HasOne("Ale_Ink.Shared.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ale_Ink.Shared.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeoplePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemPlace", b =>
                {
                    b.HasOne("Ale_Ink.Shared.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ale_Ink.Shared.Models.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotePerson", b =>
                {
                    b.HasOne("Ale_Ink.Shared.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ale_Ink.Shared.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeoplePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotePlace", b =>
                {
                    b.HasOne("Ale_Ink.Shared.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ale_Ink.Shared.Models.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonPlace", b =>
                {
                    b.HasOne("Ale_Ink.Shared.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeoplePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ale_Ink.Shared.Models.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
